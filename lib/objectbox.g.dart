// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4448905651857159576),
      name: 'Picture',
      lastPropertyId: const IdUid(9, 9214392294722153544),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1871279941251173708),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3297392607543154227),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7307172752428168073),
            name: 'bay',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 781481841310660541),
            name: 'path',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7322714618801613300),
            name: 'width',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6961563417192374574),
            name: 'height',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 657514665598471751),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1563437029353221592),
            name: 'orientation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 9214392294722153544),
            name: 'shipId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5940229273880679964),
            relationTarget: 'Ship')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6512079005759923289),
      name: 'Ship',
      lastPropertyId: const IdUid(3, 6804501489030159148),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2739254287468513441),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4267338947184990616),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6804501489030159148),
            name: 'bays',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'pictures', srcEntity: 'Picture', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6512079005759923289),
      lastIndexId: const IdUid(1, 5940229273880679964),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Picture: EntityDefinition<Picture>(
        model: _entities[0],
        toOneRelations: (Picture object) => [object.ship],
        toManyRelations: (Picture object) => {},
        getId: (Picture object) => object.id,
        setId: (Picture object, int id) {
          object.id = id;
        },
        objectToFB: (Picture object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final pathOffset = fbb.writeString(object.path);
          final locationOffset = fbb.writeString(object.location);
          final orientationOffset = fbb.writeString(object.orientation);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.bay);
          fbb.addOffset(3, pathOffset);
          fbb.addInt64(4, object.width);
          fbb.addInt64(5, object.height);
          fbb.addOffset(6, locationOffset);
          fbb.addOffset(7, orientationOffset);
          fbb.addInt64(8, object.ship.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Picture(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.ship.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.ship.attach(store);
          return object;
        }),
    Ship: EntityDefinition<Ship>(
        model: _entities[1],
        toOneRelations: (Ship object) => [],
        toManyRelations: (Ship object) => {
              RelInfo<Picture>.toOneBacklink(
                      9, object.id, (Picture srcObject) => srcObject.ship):
                  object.pictures
            },
        getId: (Ship object) => object.id,
        setId: (Ship object, int id) {
          object.id = id;
        },
        objectToFB: (Ship object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.bays);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ship(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.pictures,
              store,
              RelInfo<Picture>.toOneBacklink(
                  9, object.id, (Picture srcObject) => srcObject.ship),
              store.box<Ship>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Picture] entity fields to define ObjectBox queries.
class Picture_ {
  /// see [Picture.id]
  static final id = QueryIntegerProperty<Picture>(_entities[0].properties[0]);

  /// see [Picture.name]
  static final name = QueryStringProperty<Picture>(_entities[0].properties[1]);

  /// see [Picture.bay]
  static final bay = QueryIntegerProperty<Picture>(_entities[0].properties[2]);

  /// see [Picture.path]
  static final path = QueryStringProperty<Picture>(_entities[0].properties[3]);

  /// see [Picture.width]
  static final width =
      QueryIntegerProperty<Picture>(_entities[0].properties[4]);

  /// see [Picture.height]
  static final height =
      QueryIntegerProperty<Picture>(_entities[0].properties[5]);

  /// see [Picture.location]
  static final location =
      QueryStringProperty<Picture>(_entities[0].properties[6]);

  /// see [Picture.orientation]
  static final orientation =
      QueryStringProperty<Picture>(_entities[0].properties[7]);

  /// see [Picture.ship]
  static final ship =
      QueryRelationToOne<Picture, Ship>(_entities[0].properties[8]);
}

/// [Ship] entity fields to define ObjectBox queries.
class Ship_ {
  /// see [Ship.id]
  static final id = QueryIntegerProperty<Ship>(_entities[1].properties[0]);

  /// see [Ship.name]
  static final name = QueryStringProperty<Ship>(_entities[1].properties[1]);

  /// see [Ship.bays]
  static final bays = QueryIntegerProperty<Ship>(_entities[1].properties[2]);
}
